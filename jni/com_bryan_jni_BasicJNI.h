/* DO NOT EDIT THIS FILE - it is machine generated */
#include "jni.h"
/* Header for class com_bryan_jni_BasicJNI */

#ifndef _Included_com_bryan_jni_BasicJNI
#define _Included_com_bryan_jni_BasicJNI
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_bryan_jni_BasicJNI
 * Method:    helloFromC
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_bryan_jni_BasicJNI_helloFromC
  (JNIEnv *, jclass);

/*
 * Class:     com_bryan_jni_BasicJNI
 * Method:    concatStr
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_bryan_jni_BasicJNI_concatStr
  (JNIEnv *, jclass, jstring);

/*
 * Class:     com_bryan_jni_BasicJNI
 * Method:    accessField
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_bryan_jni_BasicJNI_accessField
  (JNIEnv *, jobject);

/*
 * Class:     com_bryan_jni_BasicJNI
 * Method:    accessStaticField
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_bryan_jni_BasicJNI_accessStaticField
  (JNIEnv *, jobject);

/*
 * Class:     com_bryan_jni_BasicJNI
 * Method:    accessMethod
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_bryan_jni_BasicJNI_accessMethod
  (JNIEnv *, jobject);

/*
 * Class:     com_bryan_jni_BasicJNI
 * Method:    accessStaticMethod
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_bryan_jni_BasicJNI_accessStaticMethod
  (JNIEnv *, jobject);

/*
 * Class:     com_bryan_jni_BasicJNI
 * Method:    accessConstructorMethod
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_bryan_jni_BasicJNI_accessConstructorMethod
  (JNIEnv *, jobject);

/*
 * Class:     com_bryan_jni_BasicJNI
 * Method:    cTransformChar
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_bryan_jni_BasicJNI_cTransformChar
  (JNIEnv *, jobject, jstring);

/*
 * Class:     com_bryan_jni_BasicJNI
 * Method:    useArraySort
 * Signature: ([I)V
 */
JNIEXPORT void JNICALL Java_com_bryan_jni_BasicJNI_useArraySort
  (JNIEnv *, jobject, jintArray);

/*
 * Class:     com_bryan_jni_BasicJNI
 * Method:    getIntArray
 * Signature: (I)[I
 */
JNIEXPORT jintArray JNICALL Java_com_bryan_jni_BasicJNI_getIntArray
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_bryan_jni_BasicJNI
 * Method:    localRef
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_bryan_jni_BasicJNI_localRef
  (JNIEnv *, jobject);

/*
 * Class:     com_bryan_jni_BasicJNI
 * Method:    createGlobalRef
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_bryan_jni_BasicJNI_createGlobalRef
  (JNIEnv *, jobject);

/*
 * Class:     com_bryan_jni_BasicJNI
 * Method:    useGlobalRef
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_bryan_jni_BasicJNI_useGlobalRef
  (JNIEnv *, jobject);

/*
 * Class:     com_bryan_jni_BasicJNI
 * Method:    deleteGlobalRef
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_bryan_jni_BasicJNI_deleteGlobalRef
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
